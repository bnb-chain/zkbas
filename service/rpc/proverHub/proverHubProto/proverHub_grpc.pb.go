// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proverHub.proto

package proverHubProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProverHubRPCClient is the client API for ProverHubRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProverHubRPCClient interface {
	GetUnprovedBlock(ctx context.Context, in *ReqGetUnprovedBlock, opts ...grpc.CallOption) (*RespGetUnprovedBlock, error)
	SubmitProof(ctx context.Context, in *ReqSubmitProof, opts ...grpc.CallOption) (*RespSubmitProof, error)
}

type proverHubRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewProverHubRPCClient(cc grpc.ClientConnInterface) ProverHubRPCClient {
	return &proverHubRPCClient{cc}
}

func (c *proverHubRPCClient) GetUnprovedBlock(ctx context.Context, in *ReqGetUnprovedBlock, opts ...grpc.CallOption) (*RespGetUnprovedBlock, error) {
	out := new(RespGetUnprovedBlock)
	err := c.cc.Invoke(ctx, "/proverHub.proverHubRPC/getUnprovedBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverHubRPCClient) SubmitProof(ctx context.Context, in *ReqSubmitProof, opts ...grpc.CallOption) (*RespSubmitProof, error) {
	out := new(RespSubmitProof)
	err := c.cc.Invoke(ctx, "/proverHub.proverHubRPC/submitProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProverHubRPCServer is the server API for ProverHubRPC service.
// All implementations must embed UnimplementedProverHubRPCServer
// for forward compatibility
type ProverHubRPCServer interface {
	GetUnprovedBlock(context.Context, *ReqGetUnprovedBlock) (*RespGetUnprovedBlock, error)
	SubmitProof(context.Context, *ReqSubmitProof) (*RespSubmitProof, error)
	mustEmbedUnimplementedProverHubRPCServer()
}

// UnimplementedProverHubRPCServer must be embedded to have forward compatible implementations.
type UnimplementedProverHubRPCServer struct {
}

func (UnimplementedProverHubRPCServer) GetUnprovedBlock(context.Context, *ReqGetUnprovedBlock) (*RespGetUnprovedBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnprovedBlock not implemented")
}
func (UnimplementedProverHubRPCServer) SubmitProof(context.Context, *ReqSubmitProof) (*RespSubmitProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProof not implemented")
}
func (UnimplementedProverHubRPCServer) mustEmbedUnimplementedProverHubRPCServer() {}

// UnsafeProverHubRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProverHubRPCServer will
// result in compilation errors.
type UnsafeProverHubRPCServer interface {
	mustEmbedUnimplementedProverHubRPCServer()
}

func RegisterProverHubRPCServer(s grpc.ServiceRegistrar, srv ProverHubRPCServer) {
	s.RegisterService(&ProverHubRPC_ServiceDesc, srv)
}

func _ProverHubRPC_GetUnprovedBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUnprovedBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverHubRPCServer).GetUnprovedBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proverHub.proverHubRPC/getUnprovedBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverHubRPCServer).GetUnprovedBlock(ctx, req.(*ReqGetUnprovedBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverHubRPC_SubmitProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSubmitProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverHubRPCServer).SubmitProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proverHub.proverHubRPC/submitProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverHubRPCServer).SubmitProof(ctx, req.(*ReqSubmitProof))
	}
	return interceptor(ctx, in, info, handler)
}

// ProverHubRPC_ServiceDesc is the grpc.ServiceDesc for ProverHubRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProverHubRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proverHub.proverHubRPC",
	HandlerType: (*ProverHubRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUnprovedBlock",
			Handler:    _ProverHubRPC_GetUnprovedBlock_Handler,
		},
		{
			MethodName: "submitProof",
			Handler:    _ProverHubRPC_SubmitProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proverHub.proto",
}
